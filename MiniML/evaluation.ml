(* 
                         CS 51 Final Project
                         MiniML -- Evaluation
*)

(* This module implements a small untyped ML-like language under
   various operational semantics.
 *)
    
open Expr ;;
  
(* Exception for evaluator runtime, generated by a runtime error *)
exception EvalError of string ;;
(* Exception for evaluator runtime, generated by an explicit "raise" construct *)
exception EvalException ;;


(*......................................................................
  Environments and values 
 *)

module type Env_type = sig
    type env
    type value =
      | Val of expr
      | Closure of (expr * env)
    val create : unit -> env
    val close : expr -> env -> value
    val lookup : env -> varid -> value
    val extend : env -> varid -> value ref -> env
    val env_to_string : env -> string
    val value_to_string : ?printenvp:bool -> value -> string
  end

module Env : Env_type =
  struct
    type env = (varid * value ref) list
     and value =
       | Val of expr
       | Closure of (expr * env)

    (* Creates an empty environment *)
    let create () : env = [] ;;

    (* Creates a closure from an expression and the environment it's
       defined in *)
    let close (exp : expr) (env : env) : value =
      Closure (exp, env) ;;

    (* Looks up the value of a variable in the environment *)
    let lookup (env : env) (varname : varid) : value =
      !(List.assoc varname env) ;;

    (* Returns a new environment just like env except that it maps the
       variable varid to loc *)
    let extend (env : env) (varname : varid) (loc : value ref) : env =
      (varname, loc) :: (List.remove_assoc varname env) ;;
      

    (* Returns a printable string representation of a value; the flag
       printenvp determines whether to include the environment in the
       string representation when called on a closure *)
    let rec value_to_string ?(printenvp : bool = true) (v : value) : string =
      match v with
      | Val exp -> exp_to_concrete_string exp
      | Closure (exp, env) ->
          let envp = 
            env
            |> List.map (fun (x, y) -> "[" ^ x ^ " -> " ^ (value_to_string !y) ^ "]")
            |> List.fold_left ( ^ ) "" in
                exp_to_concrete_string exp ^ 
                  (if printenvp then envp else "") ;;

    (* Returns a printable string representation of an environment *)
    let env_to_string (env : env) : string =
      value_to_string (Closure (Var "", env)) ;;

  end
;;


(*......................................................................
  Evaluation functions

  Each of the evaluation functions below, evaluates an expression exp
  in an enviornment env returning a result of type value. We've
  provided an initial implementation for a trivial evaluator, which
  just converts the expression unchanged to a value and returns it,
  along with "stub code" for three more evaluators: a substitution
  model evaluator and dynamic and lexical environment model versions.

  Each evaluator is of type expr -> Env.env -> Env.value for
  consistency, though some of the evaluators don't need an
  environment, and some will only return values that are "bare
  values" (that is, not closures). 

  DO NOT CHANGE THE TYPE SIGNATURES OF THESE FUNCTIONS. Compilation
  against our unit tests relies on their having these signatures. If
  you want to implement an extension whose evaluator has a different
  signature, implement it as eval_e below.  *)

(* The TRIVIAL EVALUATOR, which leaves the expression to be evaluated
   essentially unchanged, just converted to a value for consistency
   with the signature of the evaluators. *)
   
let eval_t (exp : expr) (_env : Env.env) : Env.value =
  (* coerce the expr, unchanged, into a value *)
  Env.Val exp ;;

(* The SUBSTITUTION MODEL evaluator -- to be completed *)

let to_exp (va : Env.value) : expr =
  match va with
  | Env.Val ex  | Closure (ex, _) -> ex ;;
   
let rec eval_s (_exp : expr) (_env : Env.env) : Env.value =
  match _exp with
        | Unassigned -> raise (EvalError "unassigned")
        | Num _ | Bool _ | Fun _ | Var _ -> Env.Val _exp
        | Unop (un, x) ->
            (match eval_s x _env with
            | Env.Val (Num i) -> Env.Val (Num (~- i))
            | _ -> raise (EvalError "invalid unop"))
        | Binop (bin, x, y) ->
            let x' = to_exp (eval_s x _env) in
            let y' = to_exp (eval_s y _env) in
            (match bin, x', y' with
            | Plus, Num p, Num q -> Printf.printf "%s%s" "hey\n" (exp_to_concrete_string _exp ^ "\n"); Env.Val (Num (p + q))
            | Minus, Num p, Num q -> Env.Val (Num (p - q))
            | Times, Num p, Num q -> Env.Val (Num (p * q))
            | Equals, p, q ->
                (match p, q with
                  | Num pr, Num qr -> Env.Val (Bool (pr = qr))
                  | Bool pr, Bool qr -> Env.Val (Bool (pr = qr))
                  | _ -> raise (EvalError "invalid equals"))
            | LessThan, p, q ->
                (match p, q with
                | Num pr, Num qr -> Env.Val (Bool (pr < qr))
                | Bool pr, Bool qr -> Env.Val (Bool (pr < qr))
                | _ -> raise (EvalError "invalid leq"))
            | _ -> Printf.printf "%s%s" "hey\n" (exp_to_concrete_string _exp ^ "\n") ; raise (EvalError "invalid value_type"))
        | Conditional (x, y, z) ->
            (match to_exp (eval_s x _env) with 
            | Bool true -> eval_s y _env
            | Bool false -> eval_s z _env
            | _ -> raise (EvalError "invalid condition"))
        | Let (v, x, y) -> eval_s (subst v (to_exp (eval_s x _env)) y) _env
        | Letrec (v, x, y) ->
            let x' = to_exp (eval_s x _env) in
            let subx = subst v (Letrec (v, x', Var v)) x' in
            let suby = subst v subx y in
              eval_s suby _env
        | Raise -> raise EvalException
        | App (x, y) ->
        (*Printf.printf "%s%s%s" "[" (exp_to_concrete_string (to_exp(eval_s x _env))) "]";*)
            match eval_s x _env with
            | Val Fun (v, p) -> (*Printf.printf "%s" v;*) eval_s (subst v (to_exp (eval_s y _env)) p) _env
            | _ -> raise (EvalError "invalid application") ;;
     
(* The DYNAMICALLY-SCOPED ENVIRONMENT MODEL evaluator -- to be
   completed *)
   
let rec eval_d (_exp : expr) (_env : Env.env) : Env.value =
  match _exp with 
    | Num _ | Fun _ | Bool _ -> Env.Val _exp
    | Var v -> Env.lookup _env v
    | Unop (un, x) -> let x' = to_exp (eval_d x _env) in
                        eval_s (Unop (un, x')) _env
    | Binop (bin, x, y) -> 
        let x' = to_exp (eval_d x _env) in
        let y' = to_exp (eval_d y _env) in
          eval_s (Binop (bin, x', y')) _env
    | Unassigned -> raise (EvalError "unassigned")
    | Raise -> raise EvalException
    | Conditional (x, y, z) ->
        (match to_exp (eval_d x _env) with 
        | Bool true -> eval_d y _env
        | Bool false -> eval_d z _env
        | _ -> raise (EvalError "invalid condition"))
    | Let (v, x, y) -> eval_d y (Env.extend _env v (ref (eval_d x _env)))
    | Letrec (v, x, y) ->
        let x' = to_exp (eval_d x _env) in
        let subx = subst v (Letrec (v, x', Var v)) x' in
        let suby = subst v subx y in
          eval_d suby _env
    | App (x, y) ->
      (match (eval_d x _env) with 
        | Val Fun(v, p) -> eval_d p (Env.extend _env v (ref (eval_d y _env)))
        | _ -> raise (EvalError "invalid application"));;  
  
       
(* The LEXICALLY-SCOPED ENVIRONMENT MODEL evaluator -- optionally
   completed as (part of) your extension *)
   
let rec eval_l (_exp : expr) (_env : Env.env) : Env.value =
  match _exp with 
    | Num _ | Bool _ -> Env.Val _exp
    | Var v -> Env.lookup _env v
    | Fun _  -> Env.close _exp _env
    | Unop (un, x) -> let x' = to_exp (eval_l x _env) in
                        eval_s (Unop (un, x')) _env
    | Binop (bin, x, y) -> 
        let x' = to_exp (eval_l x _env) in
        let y' = to_exp (eval_l y _env) in
          eval_s (Binop (bin, x', y')) _env
    | Unassigned -> raise (EvalError "unassigned")
    | Raise -> raise EvalException
    | Conditional (x, y, z) ->
        (match to_exp (eval_l x _env) with 
        | Bool true -> eval_l y _env
        | Bool false -> eval_l z _env
        | _ -> raise (EvalError "invalid condition"))
    | Let (v, x, y) -> eval_l y (Env.extend _env v (ref (eval_l x _env)))
    | Letrec (v, x, y) ->
        let x' = to_exp (eval_l x _env) in
        let subx = subst v (Letrec (v, x', Var v)) x' in
        let suby = subst v subx y in
          eval_l suby _env
    | App (x, y) ->
       let x' = Env.close (to_exp (eval_l x _env)) _env in
       let y' = eval_l x _env in
         match x' with
         | Closure (Fun(p, q), env) ->
             let env' = Env.extend env p (ref y') in
             eval_l q env'
         | _ -> raise (EvalError "invalid application") ;;



  (*match _exp with
  | Var v ->
      (match Env.lookup _env v with
      | Closure (ex, en) -> Env.lookup en v
      | _ -> Val _exp)
  | Fun _ -> Env.close _exp _env 
  | App (v, y) ->
      (match eval_l v _env
      | Closure ((Fun (p, q)), env) ->
        
        let vq = eval_l y _env in
        let env' = Env.extend env p (ref vq) in
          eval_l q env'
      | _ -> raise (EvalError "invalid semantics"))
  | _ -> eval_d _exp _env ;; *)

(* The EXTENDED evaluator -- if you want, you can provide your
   extension as a separate evaluator, or if it is type- and
   correctness-compatible with one of the above, you can incorporate
   your extensions within eval_s, eval_d, or eval_l. *)

let eval_e _ =
  failwith "eval_e not implemented" ;;
  
(* Connecting the evaluators to the external world. The REPL in
   miniml.ml uses a call to the single function evaluate defined
   here. Initially, evaluate is the trivial evaluator eval_t. But you
   can define it to use any of the other evaluators as you proceed to
   implement them. (We will directly unit test the four evaluators
   above, not the evaluate function, so it doesn't matter how it's set
   when you submit your solution.) *)
   
let evaluate = eval_l ;;
